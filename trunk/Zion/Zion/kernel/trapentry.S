/* See COPYRIGHT for copyright information. */

#include <include/mmu.h>
#include <include/memlayout.h>
#include <include/trap.h>


###################################################################
# exceptions/interrupts
###################################################################

/* The TRAPHANDLER macro defines a globally-visible function for handling
 * a trap.  It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 */
#define TRAPHANDLER(name, num)						\
	.data;											\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.long name;											\
	.align 2;		/* align function definition */		\
	.text;												\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.data;									\
	.globl name;							\
	.type name, @function;						\
	.long name;								\
	.align 2;							\
	.text;								\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.data
.globl _idt_code
_idt_code:

.text

/* Use TRAPHANDLER and TRAPHANDLER_NOEC to add Handlers of
 * the Interrupt/Exception.
 */
	TRAPHANDLER_NOEC(divide_error, T_DIVIDE)		// divide error
	TRAPHANDLER_NOEC(debug, T_DEBUG)				// debug exception
	TRAPHANDLER_NOEC(nmi, T_NMI)					// non-maskable interrupt
	TRAPHANDLER_NOEC(breakpoint, T_BRKPT)			// breakpoint
	TRAPHANDLER_NOEC(overflow, T_OFLOW)				// overflow
	TRAPHANDLER_NOEC(bounds, T_BOUND)				// bounds check
	TRAPHANDLER_NOEC(invalid_op, T_ILLOP)			// illegal opcode
	TRAPHANDLER_NOEC(device_not_available, T_DEVICE)// device not available
	TRAPHANDLER(double_fault, T_DBLFLT)				// double fault
	TRAPHANDLER_NOEC(coprocessor_segment_overrun, T_COPROC)	// reserved (not generated by recent processors)
	TRAPHANDLER(invalid_TSS, T_TSS)					// invalid task switch segment
	TRAPHANDLER(segment_not_present, T_SEGNP)		// segment not present
	TRAPHANDLER(stack_segment, T_STACK)				// stack exception
	TRAPHANDLER(general_protection, T_GPFLT)		// general protection fault
	TRAPHANDLER(page_fault, T_PGFLT)				// page fault
	TRAPHANDLER_NOEC(reserved, T_RES)				// reserved
	TRAPHANDLER_NOEC(float_point_error, T_FPERR)	// floating point error
	TRAPHANDLER(alignment_check, T_ALIGN)			// aligment check
	TRAPHANDLER_NOEC(machine_check, T_MCHK)			// machine check
	TRAPHANDLER_NOEC(SIMD_float_point_error, T_SIMDERR)// SIMD floating point error

	TRAPHANDLER_NOEC(system_call, T_SYSCALL)		// system call
//	TRAPHANDLER(T_DEFAULT)

_alltraps:
    pushl    %ds
    pushl    %es
    pushal
    movw $GD_KD, %ax
    movw %ax, %es
    movw %ax, %ds
    pushl %esp
    call trap
	popl  %esp
	popal
	popl    %es
	popl    %ds
	addl $8, %esp
	iret

